import os
import textwrap
import zlib

# --- Cấu hình ---
# Thư mục chứa các file firmware .bin gốc
FIRMWARE_SOURCE_DIR = os.path.join("..", "RealtekBluetoothFirmware", "fw")

# Thư mục chứa mã nguồn của driver
FIRMWARE_DEST_DIR = os.path.join("..", "RealtekBluetoothFirmware")

# Tên file .cpp sẽ được tạo ra
OUTPUT_CPP_FILE = "FwData.cpp"
# -----------------

def format_to_c_array(data):
    """Chuyển đổi dữ liệu byte thành một chuỗi mảng C được định dạng."""
    hex_values = [f"0x{byte:02x}" for byte in data]
    wrapped_lines = textwrap.wrap(", ".join(hex_values), width=70)
    return ",\n  ".join(wrapped_lines)

def main():
    """Hàm chính để tạo file FwData.cpp."""
    output_path = os.path.join(FIRMWARE_DEST_DIR, OUTPUT_CPP_FILE)
    
    # Tìm tất cả các file .bin trong thư mục nguồn
    firmware_files = [f for f in os.listdir(FIRMWARE_SOURCE_DIR) if f.endswith(".bin")]
    
    if not firmware_files:
        print(f"Không tìm thấy file .bin nào trong thư mục '{FIRMWARE_SOURCE_DIR}'.")
        return

    print(f"Đang tạo file '{output_path}'...")

    with open(output_path, "w") as f:
        # --- Viết phần header của file C++ ---
        f.write("/** @file\n")
        f.write(" *  Auto-generated by generate_fw_data.py, do not edit.\n")
        f.write(" *  Copyright (c) 2025 Nguyen12345tt. All rights reserved.\n")
        f.write(" **/\n\n")
        f.write('#include "FwData.h"\n\n')

        # --- Xử lý và viết từng firmware ---
        fw_definitions = []
        for filename in firmware_files:
            var_name = filename.replace(".", "_")
            
            # Đọc nội dung file firmware gốc
            with open(os.path.join(FIRMWARE_SOURCE_DIR, filename), "rb") as bin_file:
                original_content = bin_file.read()
            
            uncompressed_size = len(original_content)
            
            # Nén dữ liệu firmware
            compressed_content = zlib.compress(original_content)
            compressed_size = len(compressed_content)
            
            print(f"  - Đang xử lý {filename}: {uncompressed_size} bytes -> {compressed_size} bytes (nén)")

            # Viết mảng C++ chứa dữ liệu ĐÃ NÉN
            f.write(f"// Firmware: {filename} (đã nén)\n")
            f.write(f"const unsigned char {var_name}[] = {{\n  ")
            f.write(format_to_c_array(compressed_content))
            f.write("\n};\n")
            f.write(f"const unsigned int {var_name}_len = {compressed_size};\n\n")
            
            # Thêm vào danh sách để tạo fwList sau
            fw_definitions.append({
                "name": filename,
                "var": var_name,
                "len_var": f"{var_name}_len",
                "uncompressed_size": uncompressed_size
            })

        # --- Viết mảng fwList ---
        f.write("// Danh sách tất cả các firmware được nhúng\n")
        f.write("const struct FwDesc fwList[] = {\n")
        for fw in fw_definitions:
            f.write(f'    {{ .name = "{fw["name"]}", .var = {fw["var"]}, .size = {fw["len_var"]}, .compressed = true, .uncompressed_size = {fw["uncompressed_size"]} }},\n')
        f.write("};\n\n")
        
        # --- Viết biến fwNumber ---
        f.write("// Tự động tính toán tổng số firmware trong danh sách\n")
        f.write(f"const int fwNumber = {len(fw_definitions)};\n")

    print("\nHoàn tất! Đã tạo thành công FwData.cpp với firmware đã được nén.")
    print("Hãy thêm file FwData.cpp mới vào project Xcode của bạn và xóa file FwRtl.cpp cũ đi.")

if __name__ == "__main__":
    main()
